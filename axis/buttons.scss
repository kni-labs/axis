// -------
// Buttons
// -------

// Function: highlight
//
// Adds a light brighter line across the top of the element for a perspective
// effect. Takes an optional argument for strength, which takes a value between
// 0 and 1.
//
// ex. highlight();
// ex. highlight: .7



// Function: parse
// Used internally for setting button sizes.
@function parse($size) {
  @if $size == 'small' {
    @return 10;
  } @else if $size == 'medium' {
    @return 13;
  } @else if $size == 'large' {
    @return 18;
  } @else {
    @return $size;
  }
}

// Mixin: Button
//
// Creates a very basic looking button style. Three optional params:
// - color: Takes any color, defaults to the default global color
// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflect
//   the font size for the text inside the button, but scales all other aspects
//   as well (corners, padding, etc).
// - textColor: Takes any color for the button text, defaults to trying to
//   detect whether the background is dark or light and setting the opposite.
//
// ex. @import button();
// ex. @import button(blue);
// ex. @import button(#D4513B);
// ex. @import button(green, large);
// ex. @import button(#4C82D4, 24);

@mixin button($color: $default-color, $size : "medium", $textColor: null) {

  // color detection and changes
  $textColor: if(light($color), #494949, #fff) !default;
  $parsed_size: parse($size);

  // now that we've got numbers, let's work some proportions
  $height : round(($parsed_size * 1.53px) / 2);
  $width : round((($parsed_size * 1.53px) * 2.2) / 2);

  // dynamically calculated styles
  font-size: $parsed_size * 1px;
  padding: ($height * 1) ($width * 1);
  border-radius: round($parsed_size / 4.33333);
  background-color: $color;
  color: $textColor;

  // constant styles
  cursor: pointer;
  font-weight: bold;
  font-family: $font-stack;
  line-height: 1em;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  border: 0;

  &:hover, &:focus {
    background-color: darken($color, 5%);
    color: darken($textColor, 3%);
    border: 0;
  }

  &:active {
    background-color: darken($color, 10%);
  }
}

// Mixin: Glossy Button
//
// Creates a more fancy looking button style. Five optional params:
// - color: Takes any color, defaults to the default global color
// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflects
//   the font size for the text inside the button, but scales all other aspects
//   as well.
// - textColor: Takes any color for the button text, defaults to trying to
//   detect whether the background is dark or light and setting the opposite.
// - shadowColor: Color for the text shadow, default is the contrast detection
//   described above.
// - hoverColor: Color of the text shadow when hovered. Default is contrast
//   detection as described above. You probably don't need to use this.

//
// ex. @include glossy-button();
// ex. @include glossy-button(blue);
// ex. @include glossy-button(#D4513B);
// ex. @include glossy-button(green, large);
// ex. @include glossy-button(#4C82D4, 24);

@mixin glossy-button($color: $default-color, $size: 'medium', $textColor: null, $shadowColor: null, $hoverColor: null) {
 $darkText: null;

  @if $textColor {
    $darkText: if(light($textColor), true, false) !default;

  } @else {
    $darkText: if(light($color), false, true) !default;
    $textColor: if($darkText, white, #494949) !default;
  }

  $shadowColor: if($darkText, rgba(#000, .1), rgba(#fff,.3)) !default;
  $hoverColor: if($darkText, rgba(#000, .2), rgba(#fff,.5)) !default;
  $downShadow: if($darkText, 0 -1px 1px rgba(#000,.2), 1px 1px 1px rgba(#fff,.6));

  // parse words, make sure it's a number
  $parsed_size: parse($size);

  // now that we've got numbers, let's work some proportions
  $height : round(($parsed_size * 1.53px) / 2);
  $width : round((($parsed_size * 1.53px) * 2.2) / 2);

  // dynamically calculated styles
  font-size: $parsed_size * 1px;
  padding: ($height * 1) ($width * 1);
  border-radius: round($parsed_size / 4.33333);
  @include gradient($color);
  text-shadow: 1px 1px 1px $shadowColor;
  border: s('1px solid %s', darken($color, 10%));
  color: $textColor;

    // constant styles
  @highlight;
  cursor: pointer;
  font-weight: bold;
  font-family: $font-stack;
  line-height: 1em;
  text-align: center;
  text-decoration: none;
  display: inline-block;

  &:hover, &:focus {
    background-position: 0 ($height * -1);
    color: darken($textColor, 3%);
    text-shadow: 1px 1px 1px $hoverColor;
  }

  &:active {
    @include box-shadow(s("inset 0 1px %s %s", $parsed_size / 2.6, rgba(darken($color, 25%),.6)));
    text-shadow: $downShadow;
    border-color: darken($color, 18%);
  }
}

// Mixin: Button Disabled
//
// Add this mixin to a button and it will make the button appear to be disabled.
// Try attaching to a class like .disabled and adding that class to the button.
// Takes no arguments.
//
// ex. .disabled
//       @include button-disabled();

@mixin button-disabled() {
  background: #ccc;
  border-color: darken(#ccc, 10%);
  opacity: .5;
  cursor: default;
  @include no-select();

  &:hover {
    background: #ccc;
    background-position: 0 0;
  }

  &:active {
    background: #ccc;
    box-shadow: none;
    border-color: darken(#ccc, 10%);
    text-shadow: 1px 1px 1px rgba(#000,.1);
  }
}


// Additive Mixin: Buttons
//
// WARNING: Creates classes in your css and styles them - not to be used inside
// an element.
//
// This mixin makes it such that you can use classes to define buttons on your
// page.
// - .btn: creates a simple button
// - .btn-fancy: creates a fancy button
// - .disabled: disables an existing button (will only work on .btn and
//   .btn-simple)

@mixin buttons() {
  .btn {
    @include transition();
    @include button();
  }

  .btn-fancy {
    @include transition();
    @include glossy-button();
  }

  .btn.disabled, .btn-simple.disabled {
    @include button-disabled();
  }
}
