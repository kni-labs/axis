// Mixin: Columns
//
// For css3 columns. Takes column count (int), column gap (px, em), column width
// (px, em), and a border-like declaration if you want a column rule. This
// follows exactly with the css3 spec, it's just quicker.
//
// ex. columns()
// ex. columns: 5
// ex. columns(8, 15px, 200px, '1px solid red')

@mixin columns($count:3, $gap:30px, $width:null, $rule:null) {
  column-count: $count;
  column-gap: $gap;
  column-width: $width if $width;
  column-rule: unquote($rule) if $rule;
}

// Mixin: Avoid Column Break
//
// If you have a list that is broken into columns, this will make sure that the
// list item is not split across columns awkwardly. Works only in webkit at the
// moment.
//
// ex. avoid-column-break()

@mixin avoid-column-break() {
  column-break-inside: avoid;
}

// Mixin: Clearfix
//
//ex. @include clearfix()

@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Alias: cf
// Clearfix but shorter.

@mixin cf() {
  @include clearfix();
}

// Alias: group
// Clearfix with a better name. Excellent for wrangling floats.

@mixin group {
  @include clearfix();
}

// Alias: Inline Block
// Cross browser inline block display. Saves many IE headaches.

@mixin inline-block() {
  display: inline-block;

  @if support-for-ie {
    display: -moz-inline-stack;
    vertical-align: baseline;
    zoom: 1;
    *display: inline;
    *vertical-align: auto;
  }
}

// Mixin: Border Box HTML
// Add border box to every element in your project. Used in your project root.
// http://www.paulirish.com/2012/box-sizing-border-box-ftw/

@mixin border-box-html() {
  html {
    box-sizing: border-box;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }
}

// Mixin: Vertically Align
// Cross browser vertical align. Works down to IE9.
//
// ex. vertically-align() or reset it with vertically-align(false)

@mixin vertically-align($reset:null) {
  @if $reset != false {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
  }
  @else {
    position: relative;
    top: 0;
    transform: translateY(0);
  }
}

// Mixin: Media
//
// Based on Nicole Sullivan's media class, made famous by Facebook
// http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-
// hundreds-of-lines-of-code
//
// Put this on a parent and it will split the first two children left and right,
// like you would with perhaps a comment with an avatar to the left. Pass it a
// margin between the two. Explained fully here:
// http://carrotblog.com/css-patterns-evolved/
//
// This mixin works right when the element you apply it to has two or three
// direct children. The first one will float to the left, the second one will be
// to the right of the first, and third will go farthest right.
//
// ex. @include media()
// ex. @include media(15px)
// ex. @include media(15px, 10px)

@mixin media($margin-left: 10px, $margin-right: $margin-left) {

  overflow: hidden;
  zoom: 1;

  & > * {
    @include inline-block();
    overflow: hidden;
  }

  & > *:first-child {
    float: left;
    margin-right: $margin-right;
  }

  & > *:nth-child(3) {
    float: right;
    margin-left: $margin-left;
  }
}

//remove-unit function is called in ratio-box
@function remove-unit($n) {
  @if typeof($n) is "unit" {
    @return $n / ($n * 0 + 1);
  }

  @else {
    @return $n;
  }
}

// Mixin: Ratio Box
// Set a specific width/height ratio. Useful on background images and iframes.

@mixin ratio-box($ratio: 1/1) {
  $ratio: remove-unit($ratio);
  overflow: hidden;
  position: relative;

  &:before {
    content: '';
    display: block;
    height: 0;
    padding-top: (1 / $ratio) * 100%;
  }
}


// Mixin: Equal widths
//
// Use on a parent element to set equal widths for an unknown number of children.
// Note: This will render individual css classes for every number up to the maxItems.
//
// ex: equal-widths()
// ex: equal-widths: 20
// ex: equal-widths(50, div, 30)


@mixin equal-widths($gutter:2px, $selector: li, $maxItems:10) {
  @for $count from 1 through $maxItems {
    #{$selector}:nth-last-child(#{$count}):first-child
    #{$selector}:nth-last-child(#{$count}):first-child ~ #{$selector} {

      $countAdjust: #{$count} - 1;
      $equalSlice: unit((100 / #{$count}), '%');
      $unitType: unit($gutter);
      $gutterAdjust: unit(($gutter * ($countAdjust) / #{$count}), $unitType);
      $gutter: unit(($gutter), $unitType);
      width: calc($equalSlice - $gutterAdjust);
      margin-right: $gutter;

    }
  }
  #{$selector} {
    float: left;
    &:last-child {
      margin-right: 0 !important;
    }
  }
}

// Mixin: Table Layout
//
// Sometimes you just need a good old-fashioned table layout.
// Read more: http://colintoh.com/blog/display-table-anti-hero
//
// ex: @include tl()
// ex: @include tl(auto)

@mixin tl($layout-type: fixed) {
  display: table;
  table-layout: $layout-type;  //fixed or auto
  margin: 0;
  padding: 0;
  width: 100%;

  > * {
    display: table-cell;
  }
}
