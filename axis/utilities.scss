
// ---------
// Utilities
// ---------

// Mixin: Pie
// When turned on, enables css3 pie (http://css3pie.com/) for all
// elements that can use it. Which makes IE look a lot nicer.

@mixin pie() {
  behavior: url($pie-path) if $pie-enabled;
}

// Mixin: Rounded
//
// Unless you are working with a ridiculously large element, this will round the
// corners as much as css will allow. Even in IE.
//
// ex. rounded()

@mixin rounded() {
  border-radius: 999px;
  @include pie();
}


// Alias: No Select
// You can't highlight this.

@mixin no-select() {
  -webkit-touch-callout: none;
  user-select: none;
}

// Alias: B
// Border, but quicker and with an intelligent default.

@mixin b() {
  $arguments = unquote('1px solid') unless $arguments;
  border: $arguments
}

// Mixin: Triangle
//
// One of my favorites. Makes a little css triangle for you. Pass it a direction
// (up, down, left, right), size (in pixels), and a color.
//
// ex. triangle()
// ex. triangle: 'down' 15px blue

@mixin triangle($direction:'up', $size:10px, $color:#000) {
  width: 0;
  height: 0;

  @if $direction == 'up' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }

  @else if $direction == 'down' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }

  @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }

  @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}

// Mixin: Debug
//
// Debugging tool - adds a border to the current element, its children,
// grandchildren, etc so you can see what's up â€“ great for precise layout
// tweaks.  It will also add flags if you made mistakes like put in inline
// styles, forgot an alt on an image, left the alt blank, etc. Not to be used
// in production, obviously.
//
// via dbox: http://codepen.io/dbox/pen/GJZzYo?editors=110

@mixin debug() {
  border: 1px solid MediumPurple;
  > * {
    border: 1px solid DarkKhaki;
  }
  > * > * {
    border: 1px solid MediumTurquoise;
  }
  > * > * > * {
    border: 1px solid LightSlateGray;
  }
  > * > * > * > * {
    border: 1px solid LightBlue;
  }
  > * > * > * > * > * {
    border: 1px solid MediumSlateBlue;
  }
  > * > * > * > * > * > * {
    border: 1px solid DeepSkyBlue;
  }
  > * > * > * > * > * > * > * {
    border: 1px solid DarkSeaGreen;
  }

  img {
    border: 1px solid #f00;
    -webkit-filter: hue-rotate(330deg) contrast(.75) saturate(6);
    filter: hue-rotate(330deg) contrast(.75) saturate(6);
  }

  img[alt] {
    border: 1px solid LimeGreen;
    -webkit-filter: none;
    filter: none;
  }

  img[alt=""] {
    border: 1px solid gold;
    -webkit-filter: contrast(1) saturate(2);
    filter: contrast(1) saturate(2);
  }

  a {
    background: rgba(#f00, .1);
    border: 1px solid #f00;
  }

  a[title] {
    background: none;
    border-color: LimeGreen;
  }

  style {
    border: block;
  }

  [style], style, [class=""], [id=""], a[href="#"] {
    background: rgba(yellow, .2);
    border: 1px solid gold;
  }
}


// Custom animation timing functions, ported from bourbon
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_timing-functions.scss

// ease-in
$ease-in-quad:      cubic-bezier(0.550,  0.085, 0.680, 0.530);
$ease-in-cubic:     cubic-bezier(0.550,  0.055, 0.675, 0.190);
$ease-in-quart:     cubic-bezier(0.895,  0.030, 0.685, 0.220);
$ease-in-quint:     cubic-bezier(0.755,  0.050, 0.855, 0.060);
$ease-in-sine:      cubic-bezier(0.470,  0.000, 0.745, 0.715);
$ease-in-expo:      cubic-bezier(0.950,  0.050, 0.795, 0.035);
$ease-in-circ:      cubic-bezier(0.600,  0.040, 0.980, 0.335);
$ease-in-back:      cubic-bezier(0.600, -0.280, 0.735, 0.045);
$ease-in-swift:     cubic-bezier(0.900,  0.000, 0.450, 1.000);

// ease-out
$ease-out-quad:     cubic-bezier(0.250,  0.460, 0.450, 0.940);
$ease-out-cubic:    cubic-bezier(0.215,  0.610, 0.355, 1.000);
$ease-out-quart:    cubic-bezier(0.165,  0.840, 0.440, 1.000);
$ease-out-quint:    cubic-bezier(0.230,  1.000, 0.320, 1.000);
$ease-out-sine:     cubic-bezier(0.390,  0.575, 0.565, 1.000);
$ease-out-expo:     cubic-bezier(0.190,  1.000, 0.220, 1.000);
$ease-out-circ:     cubic-bezier(0.075,  0.820, 0.165, 1.000);
$ease-out-back:     cubic-bezier(0.175,  0.885, 0.320, 1.275);
$ease-out-swift:    cubic-bezier(0.550,  0.000, 0.100, 1.000);

// ease-in-out
$ease-in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);
$ease-in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000);
$ease-in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000);
$ease-in-out-sine:  cubic-bezier(0.445,  0.050, 0.550, 0.950);
$ease-in-out-expo:  cubic-bezier(1.000,  0.000, 0.000, 1.000);
$ease-in-out-circ:  cubic-bezier(0.785,  0.135, 0.150, 0.860);
$ease-in-out-back:  cubic-bezier(0.680, -0.550, 0.265, 1.550);
$ease-in-out-swift: cubic-bezier(0.900,  0.000, 0.100, 1.000);



// Function for converting a px based font-size to rem.
@function rem($size) {
  $base-font-size: 16px !default ;
  $remSize: $size / $base-font-size;
  //Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Block Mixin: Quantity Queries
//
// Set rules for a selector based on a specific sibling count.
// via: https://github.com/pascalduez/postcss-quantity-queries
//
@mixin quantity-at-least($count: 4, $selector: li) {
  & > #{$selector}:nth-last-child(n+#{$count}),
  & > #{$selector}:nth-last-child(n+#{$count}) ~ #{$selector} {
    @content;
  }
}

@mixin quantity-at-most($count: 4, $selector: li) {
  & > #{$selector}:nth-last-child(-n+#{$count}):first-child,
  & > #{$selector}:nth-last-child(-n+#{$count}):first-child ~ #{$selector} {
    @content;
  }
}

@mixin quantity-between($start:0, $end:10, $selector:li) {
  & > #{$selector}:nth-last-child(n+#{$start}):nth-last-child(-n+#{$end}):first-child,
  & > #{$selector}:nth-last-child(n+#{$start}):nth-last-child(-n+#{$end}):first-child ~ #{$selector} {
    @content;
  }
}

@mixin quantity-exactly($count: 4, $selector: li) {
  & > #{$selector}:nth-last-child(#{$count}):first-child,
  & > #{$selector}:nth-last-child(#{$count}):first-child ~ #{$selector} {
    @content;
  }
}

@mixin bubble($pos0:left, $pos1:false, $color:#EEEEEE, $width:false, $triangleSize:10px, $sideDistance:15px, $padding:10px, $pointer:false, $triangleColor:darken($color, 3%), $triangleBorderColor:darken($triangleColor, 10%)) {
  // use named argument 'pointer' as pos0 arg (to preserve old bubble api)
  $borderWidth: 1px;
  $sqrt2: 1.3;
  $distanceYShadow: ($sideDistance - $borderWidth);
  $distanceXShadow: ($sideDistance - $borderWidth);
  $marginLeftShadow: auto;
  $marginLeft: auto;
  $marginTopShadow: auto;
  $marginTop: auto;

  @if $pointer {
    $pos1: $pointer;
    $pos0: bottom;
  }
  // if no pos1 is given, shift args and assume 'bottom pos0'

  @if $pos1 is false {
    $pos1: $pos0;
    $pos0: bottom;
  }

  @else if $pos1 is a 'color' {
    width: $color;
    color: $pos1;
    $pos1: $pos0;
    $pos0: bottom;
  }

  @include notice($width $color $padding);

  @if $pos0 is top {
    $directionTriangle: up;
    $positionY: top;
    $distanceY: -($triangleSize);
    $distanceYShadow: -($triangleSize + $borderWidth * $sqrt2);
  }

  @else if $pos0 is bottom {
    $directionTriangle: down;
    $positionY: bottom;
    $distanceY: -($triangleSize);
    $distanceYShadow: -($triangleSize + $borderWidth * $sqrt2);
  }

  @else if $pos0 is left {
    $directionTriangle: left;
    $positionX: left;
    $distanceX: -($triangleSize);
    $distanceXShadow : -($triangleSize + $borderWidth * $sqrt2);
  }

  @else if $pos0 right {
    $directionTriangle: right;
    $positionX: right;
    $distanceX: -($triangleSize);
    $distanceXShadow: -($triangleSize + $borderWidth * $sqrt2);
  }

  @if $pos1 is left {
    $positionX: left;
    $distanceX: $sideDistance;
  }

  @else if $pos1 is right {
    $positionX: right;
    $distanceX: $sideDistance;
  }

  @else if $pos1 is bottom {
    $positionY: bottom;
    $distanceY: $sideDistance;
  }

  @else if $pos1 is top {
    $positionY: top;
    $distanceY: $sideDistance;
  }

  @else if $pos1 is center {
    @if $pos0 is top or $pos0 is bottom or $pos1 is false {
      $marginLeft: -($triangleSize);
      $marginLeftShadow: -($triangleSize + $borderWidth * $sqrt2 / 2);
      $positionX: left;
      $distanceX: 50%;
      $distanceXShadow: 50%;
    }

    @else {
      $marginTop: -($triangleSize/2);
      $marginTopShadow: -($triangleSize/2 + $borderWidth * $sqrt2 / 2);
      $positionY: top;
      $distanceY: 50%;
      $distanceYShadow: 50%;
    }
  }

  &:before {
    margin-top: $marginTopShadow;
    margin-left: $marginLeftShadow;
    @include triangle($directionTriangle ($triangleSize + $borderWidth * $sqrt2) $triangleBorderColor);
    absolute: $positionY $distanceYShadow $positionX $distanceXShadow;
    display: block;
  }

  &:after {
    margin-top: $marginTop;
    margin-left: $marginLeft;
    @include triangle($directionTriangle $triangleSize $triangleColor);
    absolute: $positionY $distanceY $positionX $distanceX;
    display: block;
  }
}


// Mixin: Figure
//
// For when you want to *semantically* show an image. Put this on your
// <figure /> element and it will style the nested image and figcaption in a
// wonderfully pleasing manner. Takes a color (for the thin outline), and if
// you want, dimensions of the image as a space separated list.
//
// ex. figure()
// ex. figure: blue
// ex. figure(green, 100px 400px)

@mixin figure($color: $default-color, $dimensions: false) {

  @if length($dimensions) > 1 {
    display: block;
    size: $dimensions[0] $dimensions[1];
  }
  @else if $dimensions == false {
    @include inline-block();
  }

  @else {
    @warn("Make sure you pass the image's dimensions as a space-separated list");
  }

  img {
    display: block;
    padding: 4px;
    border-radius: 3px;
    border: 1px solid rgba(color, .6);
  }

  figcaption {
    padding: 10px 0;
    text-align: center;
    @include italic();
  }
}

// Mixin: Navigation
//
// Makes a fantastic nav bar for you that doesn't look exactly like bootstrap's
// and you can customize it as well. Params: fixed (boolean), color (recommend
// something dark), link color, and size, which is an integer from one up, and
// scales every aspect of the nav bar for you. All have defaults. This mixin is
// meant to be placed on a <nav> element that contains a ul.
//
// ex. nav()
// ex. nav: 1 #444 red true

@mixin navigation($size: 1, $bgColor: #222, $linkColor: #fff, $posFixed: false) {
  @include group();
  display: block;
  z-index: 10;
  @include gradient($bgColor, 5%);
  box-shadow: 0 3px 3px rgba(0,0,0,.15);
  border-bottom: 1px solid rgba(darken($bgColor, 15%),.7);
  height: ($size + 14) * 2.866px;
  width: 100%;
  font-size: unit($size + 14, 'px');

  @if $posFixed {
    position: fixed;
  }

  @else {
    position: relative;
  }

  h1 {
    float: left;
    padding: ($size + 14) * .58px;
    padding-left: 17px;
    color: $linkColor;
    @include bold();
    font-size: ($size + 14) * 1.3px;
  }

  ul {
    float: right;
    margin: 0;
    padding: ($size + 14) * .8px;
    color: $linkColor;

    li {
      list-style-type: none;
      margin-right: 30px;
      float: left;

      a {
        color: $linkColor;
        border: none;
        cursor: pointer;

        &:hover {
          color: darken(linkColor, 20%);
          border: none;
        }
      }
    }
  }
}

// Alias: nav
@mixin nav {
  @include navigation();
}

// Additive Mixin: Flash Notices
//
// WARNING: Creates classes in your css and styles them - not to be used inside
// an element.
//
// Super convenient flash notices. Anything with .flash on it will display as a
// notice, and if you add the additional class .error, .warning, .notice, or
// .success, it will display the appropriate color background for the message.
//
// ex. flash-notices()

@mixin flash-notices() {
  .flash {
    &.error {
      @include flash(error);
    }
    &.warning {
      @include flash(warning);
    }
    &.notice {
      @include flash(notice);
    }
    &.success {
      @include flash(success);
    }
  }
}

// Mixin: Radio
//
// A simple reset for radio button styling across browsers. Takes a color.
// Default color is blue. Use on the <label> which wraps your radio inputs.
//
// ex. radio()
// ex. radio: gray
// ex. radio(#FF1493)

@mixin radio($color: #0074d9) {
  cursor: pointer;
  display: block;
  line-height: 2.5em;

  // Accessible hidden styles
  [type="radio"] {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    & + span {
      display: block;
    }

    // Unchecked
    & + span:before {
      background: rgba(#000,.15);
      border: 0.125em solid #fff;
      border-radius: 1em;
      box-shadow: 0 0 0 .1em rgba(#000, .25);
      content: '';
      display: inline-block;
      height: 1em;
      margin-right: 0.75em;
      transition: 0.5s ease all;
      vertical-align: -0.33em;
      width: 1em;
    }

    // Checked
    &:checked + span:before, &:focus + span:before {
      background: $color;
      box-shadow: 0 0 0 0.25em rgba(#000, .15);
    }
  }
}

 // Mixin: Range
//
// A clean, cross-browser styling reset for range inputs.
// Note: range inputs are not supported in IE9 and below.
// http://caniuse.com/#feat=input-range
//
// ex. range()
// ex. range: tomato 200px 15px 9px #333

@mixin range($color:#0074d9, $trackWidth: 100%, $thumbSize: 2em, $trackHeight: .5em, $trackColor: rgba(#000, .1)) {
  -webkit-appearance: none;
  width: $trackWidth;
  margin: 0;
  outline: none;
  background: transparent;

  &::-webkit-slider-runnable-track {
    background: $trackColor;
    border: none;
    border-radius: $trackHeight;
    height: $trackHeight;
    width: $trackWidth;
  }

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: none;
    height: $thumbSize;
    width: $thumbSize;
    border-radius: 50%;
    background: $color;
    margin-top: calc(-#{$thumbSize} / 2 + #{$trackHeight} / 2);
    transition: all 0.2s ease;

    &:hover {
      transform: scale(1.2);
      cursor: pointer;
    }

    &:active {
      background: darken($color, 15%);
    }
  }

  &:focus {
    outline: none;
  }

  &:focus::-webkit-slider-runnable-track {
    background: $trackColor;
  }

  &::-moz-range-track {
    width: $trackWidth;
    height: $trackHeight;
    background: $trackColor;
    border: none;
    border-radius: $trackHeight;
  }

  &::-moz-range-thumb {
    border: none;
    height: $thumbSize;
    width: $thumbSize;
    border-radius: 50%;
    background: $color;
    transition: all 0.2s ease;

    &:hover {
      transform: scale(1.2);
    }

    &:active {
      background: darken($color, 15%);
    }
  }

  &::-moz-focus-outer {
    border: 0;
  }

  &::-ms-track {
    height: $trackHeight;
    width: $trackWidth;
    background: transparent;
    border-width: calc(#{$thumbSize}  / 2 + #{$trackHeight} / 2) 0;
    color: transparent;
  }

  &::-ms-fill-lower, &::-ms-fill-upper, &:focus::-ms-fill-lower, &:focus::-ms-fill-upper {
    background: $trackColor;
    border-radius: 10px;
  }

  &::-ms-thumb {
    border: none;
    height: 2em;
    width: 2em;
    border-radius: 50%;
    background: $color;

    &:active {
      background: darken($color, 15%);
    }
  }

  &::-ms-tooltip {
    display: none;
  }
}
